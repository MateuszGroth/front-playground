// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name  String?
  email String  @unique
  hash  String

  recipes Recipe[]

  @@map("users")
}

model Recipe {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId Int?
  author   User? @relation(fields: [authorId], references: [id])

  title       String
  description String
  ingredients IngredientsOnRecipes[]
  steps       StepsOnRecipes[]

  @@unique([authorId, title])
  @@index([title])
  @@map("recipes")
}

model StepsOnRecipes {
  id Int @id @default(autoincrement())

  recipeId Int
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  stepNumber  Int
  description String

  @@map("recipe_steps")
}

model IngredientCategory {
  id Int @id @default(autoincrement())

  name String

  ingredients Ingredient[]

  @@map("ingredient_categories")
}

model Ingredient {
  id Int @id @default(autoincrement())

  name    String
  recipes IngredientsOnRecipes[]

  categoryId Int
  category   IngredientCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("ingredients")
}

model IngredientsOnRecipes {
  id Int @id @default(autoincrement())

  recipeId Int
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  ingredientId     Int?
  ingredient       Ingredient? @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  customIngredient String?

  quantity     Int
  quantityUnit String
}
